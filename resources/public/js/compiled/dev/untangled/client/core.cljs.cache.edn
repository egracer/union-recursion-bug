;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.client.core, :imports {Uri goog.Uri}, :requires {Uri goog.Uri, log untangled.client.logging, untangled.client.impl.network untangled.client.impl.network, untangled.client.impl.application untangled.client.impl.application, udom untangled.dom, net untangled.client.impl.network, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.built-in-mutations untangled.client.impl.built-in-mutations, om.next om.next, untangled.dom untangled.dom, app untangled.client.impl.application}, :uses nil, :defs {uri-params {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 92, :column 7, :end-line 92, :end-column 17, :arglists (quote ([] [url])), :doc "Get the current URI parameters from the browser url or one you supply", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}}, :name untangled.client.core/uri-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}, :method-params ([] [url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists ([] [url]), :doc "Get the current URI parameters from the browser url or one you supply"}, mount {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 55, :column 4, :end-line 55, :end-column 9, :protocol untangled.client.core/UntangledApplication, :doc "Start/replace the webapp on the given DOM ID or DOM Node.", :arglists (quote ([this root-component target-dom-id]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/mount, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 9, :method-params ([this root-component target-dom-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this root-component target-dom-id])), :doc "Start/replace the webapp on the given DOM ID or DOM Node."}, get-url-param {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 101, :column 7, :end-line 101, :end-column 20, :arglists (quote ([param-name] [url param-name])), :doc "Get the value of the named parameter from the browser URL (or an explicit one)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}}, :name untangled.client.core/get-url-param, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}, :method-params ([param-name] [url param-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists ([param-name] [url param-name]), :doc "Get the value of the named parameter from the browser URL (or an explicit one)"}, reset-state! {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 56, :column 4, :end-line 56, :end-column 16, :protocol untangled.client.core/UntangledApplication, :doc "Replace the entire app state with the given (pre-normalized) state.", :arglists (quote ([this new-state]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/reset-state!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Replace the entire app state with the given (pre-normalized) state."}, get-url {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 88, :column 7, :end-line 88, :end-column 14, :arglists (quote ([])), :doc "Get the current window location from the browser"}, :name untangled.client.core/get-url, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current window location from the browser"}, refresh {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 57, :column 4, :end-line 57, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work.", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/refresh, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work."}, history {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 58, :column 4, :end-line 58, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Return a serialized version of the current history of the application, suitable for network transfer", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/history, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a serialized version of the current history of the application, suitable for network transfer"}, ->Application {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 60, :column 12, :end-line 60, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, :name untangled.client.core/->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 60, :end-line 60, :max-fixed-arity 9, :fn-var true, :arglists (quote ([initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, map->Application {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 60, :column 12, :end-line 60, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__34996]))}, :name untangled.client.core/map->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([G__34996]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__34996]))}, UntangledApplication {:meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 54, :column 14, :end-line 54, :end-column 34, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], refresh [[this]], history [[this]]}}}, :protocol-symbol true, :name untangled.client.core/UntangledApplication, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 34, :column 1, :line 54, :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], refresh [[this]], history [[this]]}}, :info nil, :end-line 54, :impls #{untangled.client.core/Application}, :doc nil, :jsdoc ("@interface")}, new-untangled-test-client {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 80, :column 7, :end-line 80, :end-column 32, :arglists (quote ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}])), :doc "A test client that has no networking. Useful for UI testing with a real Untangled app container.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-test-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :doc "A test client that has no networking. Useful for UI testing with a real Untangled app container."}, Application {:num-fields 9, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable untangled.client.core/UntangledApplication cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.client.core/Application, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 60, :record true, :end-line 60, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-untangled-client {:protocol-inline nil, :meta {:file "/Users/Ethan/projects/untangled-cookbook/recipes/union-recursion-bug/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 13, :column 7, :end-line 13, :end-column 27, :arglists (quote ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}])), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state started-callback networking request-transform network-error-callback migrate], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil}}]), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  "}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{started-callback :untangled/meta initial-state reconciler-options :network-error-callback :networking :response-channel :config :queue :mounted? :migrate :steps :reconciler networking :history response-channel queue mounted? :global-error-callback :request-transform reconciler :parser :started-callback parser :initial-state :reconciler-options}, :order [:initial-state :started-callback :networking :request-transform :network-error-callback :migrate :reconciler-options :global-error-callback :queue :response-channel :reconciler :parser :mounted? :history :config :steps :untangled/meta initial-state started-callback networking queue response-channel reconciler parser mounted? reconciler-options]}, :doc nil}